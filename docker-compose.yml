version: '3.8'

services:
  fastapi_app:
    container_name: fastapi_app
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./:/volume_data
    ports:
      - '8000:8000'
    depends_on:
      postgres_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  postgres_db:
    container_name: postgres_db
    image: postgres:15.1-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASS}"
      POSTGRES_DB: db
      PGUSER: "${DB_PGUSER}"
    healthcheck:
      test: ["CMD-SHELL", "psql -U ${DB_PGUSER}", "pg_isready", "-U", "${DB_USER}", "-d", "db"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 80s
    volumes:
      - postgres_data:/var/lib/postgresql/data/

  redis:
    container_name: redis_db
    image: redis:alpine

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:alpine
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 30s
      retries: 5

  celery:
    container_name: celery
    build:
      context: .
      dockerfile: Dockerfile-celery
    depends_on:
      rabbitmq:
        condition: service_healthy

    volumes:
      - ./:/volume_data
    entrypoint: ./celery_entrypoint.sh

volumes:
  postgres_data:
